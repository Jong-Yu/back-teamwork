generator client {
  provider = "prisma-client-js"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/_model"
  exportRelationModifierClasses   = "true"
  reExport                        = "false"
  entityPrefix                    = ""
  updateDtoPrefix                 = "Update"
  outputToNestJsResourceStructure = "true"
  createDtoPrefix                 = "Create"
  dtoSuffix                       = "Dto"
  entitySuffix                    = ""
  fileNamingStyle                 = "camel"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(45)
  email     String?  @db.VarChar(45) @unique
  phone     String   @db.VarChar(45) @unique
  sign_date DateTime @db.Timestamp(0) @default(dbgenerated("CURRENT_TIMESTAMP"))
  refresh_token String? @db.VarChar(5000)
  Member    Member[]
}

model Member {
  id          String        @id @default(cuid())
  team_id     String        @db.VarChar(45)
  user_id     String        @db.VarChar(45)
  duty        String        @db.VarChar(45)
  status      Member_status
  status_date DateTime      @db.Timestamp(0) @default(now())
  Team        Team          @relation(fields: [team_id], references: [id], onUpdate: Restrict, map: "FK_1")
  User        User          @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "FK_2")
  Notice      Notice[]
  Schedule    Schedule[]
  Voting      Voting[]

  @@index([team_id], map: "FK_1")
  @@index([user_id], map: "FK_2")
}

model Notice {
  id            String                         @id @default(cuid())
  team_id       String                         @db.VarChar(45)
  member_id     String                         @db.VarChar(45)
  title         String                         @db.VarChar(45)
  desc          String                         @db.VarChar(45)
  registed_date DateTime                       @db.Timestamp(0) @default(now())
  Team          Team                           @relation(fields: [team_id], references: [id], onUpdate: Restrict, map: "FK_6_1")
  Member        Member                         @relation(fields: [member_id], references: [id], onUpdate: Restrict, map: "FK_7")

  @@index([team_id], map: "FK_1")
  @@index([member_id], map: "FK_2")
}

model Schedule {
  id              String                          @id @default(cuid())
  team_id         String                          @db.VarChar(45)
  member_id       String                          @db.VarChar(45)
  title           String                          @db.VarChar(45)
  date            DateTime                        @db.Timestamp(0)
  startTime       String                          @db.VarChar(45)
  endTime         String                          @db.VarChar(45)
  location        String                          @db.VarChar(45)
  location_detail String                          @db.VarChar(45)
  min_attend      Int?
  desc            String?
  registred_date  DateTime                        @db.Timestamp(0) @default(now())
  Team            Team                            @relation(fields: [team_id], references: [id], onUpdate: Restrict, map: "FK_6")
  Member          Member                          @relation(fields: [member_id], references: [id], onUpdate: Restrict, map: "FK_8")
  Voting          Voting[]

  @@index([team_id], map: "FK_2")
  @@index([member_id], map: "FK_2_1")
}

model Team {
  id              String                          @id @default(cuid())
  name            String                          @db.VarChar(45)
  logo            String?                         @db.VarChar(45)
  desc            String?
  registered_date DateTime                        @db.Timestamp(0) @default(now())
  Member          Member[]
  Notice          Notice[]
  Schedule        Schedule[]
}

model Voting {
  id          String   @id @default(cuid())
  schedule_id String   @db.VarChar(45)
  member_id   String   @db.VarChar(45)
  voting      Boolean
  voting_date DateTime @db.Timestamp(0) @default(now())
  Schedule    Schedule @relation(fields: [schedule_id], references: [id], onUpdate: Restrict, map: "FK_4")
  Member      Member   @relation(fields: [member_id], references: [id], onUpdate: Restrict, map: "FK_5")

  @@index([schedule_id], map: "FK_1")
  @@index([member_id], map: "FK_2")
}

enum Member_status {
  active
  drop
}
